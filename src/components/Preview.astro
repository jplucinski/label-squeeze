---
declare global {
  interface Window {
    pdfjsLib: any;
  }
}
---

<div class="lg:sticky lg:top-4">
  <div
    class="bg-white p-4 md:p-6 rounded-2xl shadow-xl border border-gray-200 overflow-hidden"
  >
    <div
      class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-4 md:mb-6 gap-3"
    >
      <h2
        class="text-xl md:text-2xl font-bold text-gray-900 flex items-center gap-2"
      >
        <svg
          class="w-6 h-6 md:w-7 md:h-7 text-primary-600 flex-shrink-0"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
          ></path>
        </svg>
        Preview
      </h2>
      <div class="flex gap-2 w-full sm:w-auto">
        <button
          id="printBtn"
          disabled
          class="flex-1 sm:flex-initial px-3 md:px-6 py-2 md:py-3 bg-gradient-to-r from-blue-500 to-indigo-500 text-white rounded-xl disabled:opacity-50 disabled:cursor-not-allowed hover:from-blue-600 hover:to-indigo-600 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 font-semibold flex items-center justify-center gap-1.5 md:gap-2 text-sm md:text-base"
        >
          <svg
            class="w-4 h-4 md:w-5 md:h-5 flex-shrink-0"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z"
            ></path>
          </svg>
          <span>Print</span>
        </button>
        <button
          id="downloadBtn"
          disabled
          class="flex-1 sm:flex-initial px-3 md:px-6 py-2 md:py-3 bg-gradient-to-r from-primary-500 to-accent-500 text-white rounded-xl disabled:opacity-50 disabled:cursor-not-allowed hover:from-primary-600 hover:to-accent-600 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 font-semibold flex items-center justify-center gap-1.5 md:gap-2 text-sm md:text-base"
        >
          <svg
            class="w-4 h-4 md:w-5 md:h-5 flex-shrink-0"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"
            ></path>
          </svg>
          <span>Download</span>
        </button>
      </div>
    </div>

    <div
      id="previewContainer"
      class="w-full aspect-[1/1.414] bg-gradient-to-br from-gray-50 to-gray-100 rounded-xl flex items-center justify-center shadow-inner border-2 border-gray-200"
    >
      <div id="emptyPreview" class="text-center p-8">
        <svg
          class="w-16 h-16 mx-auto mb-4 text-gray-400"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z"
          ></path>
        </svg>
        <p class="text-gray-500 font-medium">Upload PDF files to see preview</p>
        <p class="text-gray-400 text-sm mt-2">
          Your merged document will appear here
        </p>
      </div>
      <canvas id="pdfPreview" class="hidden max-w-full max-h-full rounded-lg"
      ></canvas>
    </div>
  </div>
</div>

<script>
  import { PageSizes, PDFDocument } from "pdf-lib";

  const A6_WIDTH = PageSizes.A6[0];
  const A6_HEIGHT = PageSizes.A6[1];

  // A4 dimensions
  const A4_WIDTH = PageSizes.A4[0];
  const A4_HEIGHT = PageSizes.A4[1];

  // Print cleanup delay - time to wait before removing print iframe
  // This gives the print dialog enough time to open
  const PRINT_CLEANUP_DELAY_MS = 1000;

  class PreviewHandler {
    private canvas: HTMLCanvasElement;
    private downloadBtn: HTMLButtonElement;
    private printBtn: HTMLButtonElement;
    private emptyPreview: HTMLElement;
    private files: { name: string; buffer: ArrayBuffer }[] = [];
    private mergedPdf: ArrayBuffer | null = null;

    constructor() {
      this.canvas = document.getElementById("pdfPreview") as HTMLCanvasElement;
      this.downloadBtn = document.getElementById(
        "downloadBtn",
      ) as HTMLButtonElement;
      this.printBtn = document.getElementById("printBtn") as HTMLButtonElement;
      this.emptyPreview = document.getElementById(
        "emptyPreview",
      ) as HTMLElement;

      this.initializeEventListeners();
    }

    private initializeEventListeners() {
      window.addEventListener("fileListUpdated", (e: CustomEvent) => {
        console.log("Files received:", e.detail.files);
        this.files = e.detail.files;
        this.updatePreview();
      });

      this.downloadBtn.addEventListener("click", () => {
        if (this.mergedPdf) {
          this.downloadMergedPdf();
        }
      });

      this.printBtn.addEventListener("click", () => {
        if (this.mergedPdf) {
          this.printMergedPdf();
        }
      });
    }

    private async updatePreview() {
      console.log("Updating preview with files:", this.files);
      if (this.files.length === 0) {
        this.canvas.classList.add("hidden");
        this.emptyPreview.classList.remove("hidden");
        this.downloadBtn.disabled = true;
        this.printBtn.disabled = true;
        return;
      }

      try {
        // Merge PDFs
        const mergedDoc = await PDFDocument.create();
        const failedFiles: string[] = [];

        // Calculate how many pages we need
        const labelsPerPage = 4;
        const totalPages = Math.ceil(this.files.length / labelsPerPage);

        // Process files in groups of 4
        for (let pageIndex = 0; pageIndex < totalPages; pageIndex++) {
          const currentPage = mergedDoc.addPage([A4_WIDTH, A4_HEIGHT]);
          const startIdx = pageIndex * labelsPerPage;
          const pageFiles = this.files.slice(
            startIdx,
            startIdx + labelsPerPage,
          );

          // Process each file for current page
          for (let i = 0; i < pageFiles.length; i++) {
            const file = pageFiles[i];
            try {
              const doc = await PDFDocument.load(file.buffer);
              const embeddedPage = await mergedDoc.embedPage(doc.getPage(0), {
                left: 0,
                right: A6_WIDTH,
                bottom: A6_HEIGHT,
                top: A4_HEIGHT,
              });

              // Calculate position
              const x = (i % 2) * A6_WIDTH;
              const y = A4_HEIGHT - (Math.floor(i / 2) + 1) * A6_HEIGHT;

              currentPage.drawPage(embeddedPage, {
                x: x,
                y: y,
                width: A6_WIDTH,
                height: A6_HEIGHT,
              });
            } catch (error) {
              console.error(`Failed to process ${file.name}:`, error);
              failedFiles.push(file.name);
              // Continue processing other files
            }
          }
        }

        // Show error if some files failed during merge
        if (failedFiles.length > 0) {
          this.showErrorModal(
            "Some Files Failed During Merge",
            `${failedFiles.length} file(s) could not be processed during merging. The preview shows only the successfully merged files.`,
            failedFiles,
          );
        }

        // Save merged PDF
        this.mergedPdf = await mergedDoc.save();

        // Create preview
        const blob = new Blob([this.mergedPdf], { type: "application/pdf" });
        const url = URL.createObjectURL(blob);

        // Wait for PDF.js to be initialized
        while (!window.pdfjsLib) {
          await new Promise((resolve) => setTimeout(resolve, 100));
        }

        // Use global pdfjsLib
        const pdfjsLib = window.pdfjsLib;

        // Render first page
        const pdf = await pdfjsLib.getDocument(url).promise;
        const numPages = pdf.numPages;

        const firstPage = await pdf.getPage(1);

        const context = this.canvas.getContext("2d");
        if (!context) return;

        // Get container dimensions
        const containerWidth = this.canvas.parentElement?.clientWidth || 595;
        const containerHeight = this.canvas.parentElement?.clientHeight || 842;

        // Calculate scale to fit A4 in container
        const scale = Math.min(
          containerWidth / A4_WIDTH, // A4 width in points
          containerHeight / A4_HEIGHT, // A4 height in points
        );

        const viewport = firstPage.getViewport({ scale });
        const scaledViewport = firstPage.getViewport({ scale });

        // Set canvas size to match container aspect ratio
        this.canvas.width = scaledViewport.width;
        this.canvas.height = scaledViewport.height;

        context.fillStyle = "#fff";
        context.fillRect(0, 0, this.canvas.width, this.canvas.height);

        // Add page navigation buttons
        let currentPageIndex = 0;

        // Add page counter
        const pageCounter = document.createElement("div");
        pageCounter.className =
          "absolute top-2 left-1/2 -translate-x-1/2 bg-white/80 px-3 py-1 rounded-full text-sm font-medium shadow-sm";

        const updatePageView = async (pageIndex: number) => {
          const page = await pdf.getPage(pageIndex + 1);
          context.fillStyle = "#fff";
          context.fillRect(0, 0, this.canvas.width, this.canvas.height);
          await page.render({
            canvasContext: context,
            viewport: scaledViewport,
          }).promise;
          // Update page counter
          pageCounter.textContent = `Page ${pageIndex + 1} of ${numPages}`;
        };

        // Add navigation buttons
        const prevBtn = document.createElement("button");
        prevBtn.textContent = "←";
        prevBtn.className =
          "absolute left-2 top-1/2 -translate-y-1/2 bg-white rounded-full w-8 h-8 shadow-md";

        const nextBtn = document.createElement("button");
        nextBtn.textContent = "→";
        nextBtn.className =
          "absolute right-2 top-1/2 -translate-y-1/2 bg-white rounded-full w-8 h-8 shadow-md";

        const container = this.canvas.parentElement;
        if (container) {
          container.style.position = "relative";
          container.appendChild(prevBtn);
          container.appendChild(nextBtn);
          container.appendChild(pageCounter);
        }

        prevBtn.onclick = () => {
          if (currentPageIndex > 0) {
            currentPageIndex--;
            updatePageView(currentPageIndex);
          }
        };

        nextBtn.onclick = () => {
          if (currentPageIndex < numPages - 1) {
            currentPageIndex++;
            updatePageView(currentPageIndex);
          }
        };

        // Show first page
        updatePageView(0);

        this.canvas.classList.remove("hidden");
        this.emptyPreview.classList.add("hidden");
        this.downloadBtn.disabled = false;
        this.printBtn.disabled = false;

        URL.revokeObjectURL(url);
      } catch (error) {
        console.error("Preview generation failed:", error);
        const errorMessage =
          error instanceof Error ? error.message : "Unknown error occurred";

        this.showErrorModal(
          "Preview Generation Failed",
          `Failed to generate preview: ${errorMessage}. Please try uploading different files or check if your PDFs are valid.`,
          [],
        );

        this.canvas.classList.add("hidden");
        this.emptyPreview.classList.remove("hidden");
        this.downloadBtn.disabled = true;
        this.printBtn.disabled = true;
      }
    }

    private showErrorModal(
      title: string,
      message: string,
      failedFiles: string[],
    ) {
      window.dispatchEvent(
        new CustomEvent("showModal", {
          detail: {
            title,
            message,
            type: "error",
            failedFiles: failedFiles.length > 0 ? failedFiles : undefined,
            actions: [
              {
                label: "Try Different Files",
                onClick: () => {
                  const fileInput = document.getElementById(
                    "file-input",
                  ) as HTMLInputElement;
                  if (fileInput) {
                    fileInput.click();
                  }
                },
                primary: true,
              },
              {
                label: "Close",
                onClick: () => {},
                primary: false,
              },
            ],
          },
        }),
      );
    }

    private downloadMergedPdf() {
      if (!this.mergedPdf) return;

      const blob = new Blob([this.mergedPdf], { type: "application/pdf" });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = "merged-labels.pdf";
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }

    private printMergedPdf() {
      if (!this.mergedPdf) return;

      const blob = new Blob([this.mergedPdf], { type: "application/pdf" });
      const url = URL.createObjectURL(blob);

      // Create an iframe to load the PDF for printing
      const iframe = document.createElement("iframe");
      iframe.style.display = "none";
      iframe.src = url;

      document.body.appendChild(iframe);

      // Wait for the PDF to load, then trigger print dialog
      iframe.onload = () => {
        try {
          if (iframe.contentWindow) {
            iframe.contentWindow.print();
          }
        } catch (error) {
          console.error("Failed to open print dialog:", error);
        }
      };

      // Handle load errors
      iframe.onerror = () => {
        console.error("Failed to load PDF for printing");
        if (iframe.parentNode === document.body) {
          document.body.removeChild(iframe);
        }
        URL.revokeObjectURL(url);
      };

      // Clean up after printing or closing the dialog
      // Note: We can't reliably detect when printing is done, so we clean up after a delay
      setTimeout(() => {
        if (iframe.parentNode === document.body) {
          document.body.removeChild(iframe);
        }
        URL.revokeObjectURL(url);
      }, PRINT_CLEANUP_DELAY_MS);
    }
  }

  // Initialize the handler when the DOM is loaded
  document.addEventListener("DOMContentLoaded", () => {
    new PreviewHandler();
  });
</script>
